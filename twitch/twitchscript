#!/bin/bash

# Parameters (See README.md)

channelsfile=/path/to/your/list/of/favorite/channel/file
gamesfile=/path/to/your/list/of/favorite/game/file
clientID=yourapikey
gamesdb=/path/to/your/game/database/file

#Number of entry in the dmenu for the twitch vod part
max_vid=100 


nobodyshit(){
    echo "Nobody streaming this shit right now"
    noshit="No streams. Choose an other game:"
    twitchgamefunction
}

aborted(){
    echo "Aborted"
    exit
}

check_and_launch(){
    gametocheck=$(echo $@)
    gametocheck=$(python -c "print('$gametocheck'.replace(' ','%20'))")
    echo "Checking connected streams for $@ ..."

    twitchdata=$(curl -s 'https://api.twitch.tv/kraken/streams?client_id='$clientID'&game='$gametocheck)
    [[ $(echo $twitchdata | jq '._total') == 0 ]] && nobodyshit

    stream=$(echo $twitchdata | jq -r '.streams[] | .channel.language, .channel.name' | awk 'NR%2{printf "%s:",$0;next;}1' | dmenu -i -p "Which stream ?" | sed 's/.*://')
    [[ ! -n $stream ]] && aborted

    exec firefox -new-window https://www.twitch.tv/popout/$stream/chat?popout= & mpv https://www.twitch.tv/$stream
    exit
}

twitchgamefunction(){        
    if [[ -n $@ ]]; then
	check_and_launch $@
    else	
	game=$(awk '{print $0} END { printf "Other\nAdd" }' $gamesfile | dmenu -i -p "$noshit") || aborted
	if [[ $game == Add ]];then
0	    game=$(cat $gamesdb | dmenu -i -p "Which game do you want to add on favorite?") || aborted
	    echo -e "$game" >>$gamesfile
	    cert=$(echo -e "No\nYes" | dmenu -i -p "Do you want to check streams for $game?")
	    [[ $cert == Yes ]] || aborted
	elif [[ $game == Other ]]; then
	    game=$(cat $gamesdb| dmenu -i -p "$noshit") || aborted
	fi
	    check_and_launch $game
    fi
}

twitchlivefunction(){
    if [[ -n $@ ]]; then
	echo "Checking if $@ is live ..."
	test=$(curl -s https://api.twitch.tv/kraken/streams/"$@"?client_id=$clientID | jq ".stream._id")

	[ ! $test == null ] && (exec firefox -new-window https://www.twitch.tv/popout/$@/chat?popout= & mpv https://www.twitch.tv/"$@") || echo "$@ doesn't stream right now"
	exit
    else
	echo "Checking connected streams ..."
	twitchdata=$(curl -s 'https://api.twitch.tv/kraken/streams?client_id='$clientID'&channel='$(cat $channelsfile))

	stream=$(echo $twitchdata | jq -r '.streams[] | .channel.name' | dmenu -i -p "Which stream do you want to watch?") || aborted
	exec firefox -new-window https://www.twitch.tv/popout/$stream/chat?popout= & mpv https://www.twitch.tv/"$stream"
	exit
    fi
}

twitchvod_search(){
    searchingshit=$(python -c "print('"$(cat ~/.script/twitch/datas/listchanneltwitch)"'.replace(',','\n'))" | dmenu -p "TwitchVOD Channel:") || aborted
    echo "Searching for video on "$searchingshit
    curl_choose_and_watch
}

curl_choose_and_watch(){	
    #curl the api twitch vod search for a channel
    twitchvod=$(curl -s 'https://api.twitch.tv/kraken/channels/'$searchingshit'/videos?client_id='$clientID'&limit='$max_vid'&offset='$offset)
    total_vod=$(echo $twitchvod | jq '._total')
    [[ $total_vod == null || $total_vod == 0 ]] && twitchvod_search

    #create a table with all of the videos and get the url of the chosen one
    (( borne_max=$total_vod - $max_vid ))
    video=$(echo $twitchvod | jq -r '.videos[] | .title, .recorded_at' | awk -v bm=$borne_max -v offs=$offset 'BEGIN{ if (offs > 0 ) { printf "Prev\n" } }!(NR%2){printf ("%3d: %-100s %.10s\n", FNR/2+offs, p, $0)}{p=$0}END{ if (offs < bm) { printf "Next" } }' | dmenu -i -l 30 -p "Which video?" | sed 's/:.*//')

    [[ ! -n $video ]] && twitchvod_search
    if [[ $video == Next ]];then
	((offset= $offset + 100 ))
	curl_choose_and_watch
    elif [[ $video == Prev ]];then
        ((offset= $offset - 100 ))
	curl_choose_and_watch
    else	
	(( num=$video - 1 - $offset))
	videourl=$(echo $twitchvod | jq -r '.videos['$num'].url')
	
	# ask for the resolution and launch the video with mpv
	res=$(echo -e "720\n1080\n360" | dmenu -i -p "Which resolution? (if avalaible)") || twitchvod_search
	mpv --ytdl-format="[height<=?"$res"]" $videourl || twitchvod_search
	exit
    fi
}

if ping -q -c 1 -W 1 8.8.8.8 &>/dev/null; then
    case $1 in
	--live)
	    twitchlivefunction $2
	    ;;
	--game)
	    noshit="Choose a game"
	    twitchgamefunction "${@#$1}"
	    ;;
	--vod)
	    offset=0
	    twitchvod_search
	    ;;
	*)
	    echo -e "This is the twitch script featuring dmenu and mpv! Heres the options available : \n     --live   To check if your favorites streamers are live\n     --game   To check available streams of a desired game\n     --vod    To check for VOD on a desired channel"
	    ;;
    esac
else
    echo "No internet connection"
fi
