#!/bin/bash

# Parameters (See README.md)

channelsfile=/path/to/your/list/of/favorite/channel/file
gamesfile=/path/to/your/list/of/favorite/game/file
gamedatabase=/path/to/your/game/database/file
clientID=yourapikey

get_rid_of_those_fkg_quotes(){
    ret="${@%\"}"
    ret="${ret#\"}"
    echo $ret
}

remove_firt_argument(){
    ret="${@#$1}"
    echo $ret
}

check_connected_streams(){ #check connected stream for a game
    list_stream_up=""
    curl -s 'https://api.twitch.tv/kraken/streams?client_id='$clientID'&game='$1 >./twitchdata.tmp
    numberlive=$(cat ./twitchdata.tmp | jq ._total)
    i=0	
    while [[ ! $i == $numberlive ]]; do
	check=$(cat ./twitchdata.tmp | jq '.streams['$i'].channel.name')
    	[[ $check == null ]] && break
	check=$(get_rid_of_those_fkg_quotes $check)
	language=$(cat ./twitchdata.tmp | jq '.streams['$i'].channel.language')
	language=$(get_rid_of_those_fkg_quotes $language)
    	list_stream_up="$list_stream_up$language:$check\n"
        stream_array+=(["$language:$check"]="$check")
	((i= $i + 1 ))	
    done
    rm ./twitchdata.tmp
}

nobodyshit(){
    echo "Nobody streaming this shit right now"
    noshit="No streams. Choose an other game:"
    twitchgamefunction
}

aborted(){
    echo "Aborted"
    rm ./.temp &>/dev/null
    exit
}

check_and_launch(){
    gametocheck=$(echo $@)
    gametocheck=$(python -c "print('$gametocheck'.replace(' ','%20'))")
    echo "Checking connected streams for $@ ..."
    check_connected_streams $gametocheck
    if [[ ! -n $list_stream_up ]];then
	nobodyshit
    else
	rm ./.temp &>/dev/null
	stream=$(echo -e $list_stream_up | dmenu -i -p "Which stream") || aborted
	stream=${stream_array[$stream]}
	exec firefox -new-window https://www.twitch.tv/popout/$stream/chat?popout= & mpv https://www.twitch.tv/$stream
    fi
}

twitchgamefunction(){        
    if [[ -n $@ ]]; then
	check_and_launch $@
    else	
	game=$(cat $search_in | dmenu -i -p "$noshit") || aborted
	if [[ $game == Other ]];then
	    search_in=$gamedatabase
	    twitchgamefunction
	elif [[ $game == Add ]];then
	    addgame=$(cat $gamedatabase | dmenu -i -p "Which game do you want to add on favorite?") || aborted
	    echo -e "$addgame" >>$gamesfile
	    cert=$(echo -e "No\nYes" | dmenu -i -p "Do you want to check streams for $addgame?")
	    [[ $cert == Yes ]] && check_and_launch $addgame || aborted
	else
	    check_and_launch $game
	fi
    fi
}

twitchlivefunction(){
    if [[ -n $@ ]]; then
	echo "Checking if $@ is live ..."
	test=$(curl -s https://api.twitch.tv/kraken/streams/"$@"?client_id=$clientID | jq .stream._id)
	if [[ ! $test == "null" ]]; then
	    exec firefox -new-window https://www.twitch.tv/popout/$@/chat?popout= & mpv https://www.twitch.tv/"$@"
	else
	    echo "$@ doesn't stream right now"
	fi
    else
	list_stream_up=""
	echo "Checking connected streams ..."
	channels=$(cat $channelsfile)
	curl -s 'https://api.twitch.tv/kraken/streams?client_id='$clientID'&channel='$channels >./twitchdata.tmp
	numberlive=$(cat ./twitchdata.tmp | jq ._total)
	i=0
	while [[ ! $i == $numberlive ]]; do
	    check=$(cat ./twitchdata.tmp | jq '.streams['$i'].channel.name')
	    check=$(get_rid_of_those_fkg_quotes $check)
	    list_stream_up="$list_stream_up$check\n"
	    ((i= $i + 1 ))
	done
	rm ./twitchdata.tmp
	stream=$(echo -e $list_stream_up | dmenu -i -p "Which stream do you want to watch?") || aborted
	exec firefox -new-window https://www.twitch.tv/popout/$stream/chat?popout= & mpv https://www.twitch.tv/"$stream"
    fi
}

if ping -q -c 1 -W 1 8.8.8.8 &>/dev/null; then
    case $1 in
	--live)
	    twitchlivefunction $2
	    ;;
	--game)
	    cp $gamesfile ./.temp 
	    echo Other >>./.temp
	    echo Add >>./.temp
	    noshit="Choose a game"
	    search_in=./.temp
	    declare -A stream_array
	    stdin=$(remove_firt_argument $@)
	    twitchgamefunction $stdin
	    ;;
	*)
	    echo Need an option \"--live\" or \"--game\"
	    ;;
    esac
else
    echo "No internet connection"
fi
